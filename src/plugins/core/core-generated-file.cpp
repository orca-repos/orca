// SPDX-License-Identifier: GPL-3.0-only WITH Qt-GPL-exception-1.0

#include "core-generated-file.hpp"

#include "core-editor-manager.hpp"

#include <utils/fileutils.hpp>
#include <utils/textfileformat.hpp>

#include <QCoreApplication>
#include <QDebug>
#include <QDir>
#include <QString>

using namespace Utils;

namespace Orca::Plugin::Core {

/*!
    \class Core::GeneratedFile
    \inheaderfile coreplugin/generatedfile.h
    \inmodule Orca

    \brief The GeneratedFile class represents a file generated by a wizard.

    The BaseFileWizard class checks whether each file already exists and
    reports any errors that may occur during creation of the files.

    \sa Core::WizardDialogParameters, Core::BaseFileWizard,
 */

class GeneratedFilePrivate : public QSharedData {
public:
  GeneratedFilePrivate() = default;
  explicit GeneratedFilePrivate(const FilePath &path);
  explicit GeneratedFilePrivate(const QString &path);

  FilePath path;
  QByteArray contents;
  Id editor_id;
  bool binary = false;
  GeneratedFile::Attributes attributes;
};

inline auto operator<<(QDebug &debug, const GeneratedFilePrivate &file) -> QDebug&
{
  debug << "path: " << file.path << "; editorId: " << file.editor_id.toString() << "; binary: " << file.binary << "; contents: " << file.contents.size();
  return debug;
}

auto operator<<(QDebug &debug, const GeneratedFile &file) -> QDebug&
{
  debug << "GeneratedFile{_: " << *file.m_d << "}";
  return debug;
}

GeneratedFilePrivate::GeneratedFilePrivate(const QString &path) : path(FilePath::fromString(path).cleanPath()), attributes({}) {}  // FIXME Don't use - Remove when possible
GeneratedFilePrivate::GeneratedFilePrivate(const FilePath &path) : path(path.cleanPath()), attributes({}) {}

GeneratedFile::GeneratedFile() : m_d(new GeneratedFilePrivate) {}
GeneratedFile::GeneratedFile(const QString &path) : m_d(new GeneratedFilePrivate(path)) {} // FIXME Don't use - Remove when possible
GeneratedFile::GeneratedFile(const FilePath &path) : m_d(new GeneratedFilePrivate(path)) {}
GeneratedFile::GeneratedFile(const GeneratedFile &rhs) = default;

auto GeneratedFile::operator=(const GeneratedFile &rhs) -> GeneratedFile&
{
  if (this != &rhs)
    m_d.operator=(rhs.m_d);

  return *this;
}

GeneratedFile::~GeneratedFile() = default;

auto GeneratedFile::path() const -> QString
{
  return m_d->path.toString();
}

auto GeneratedFile::filePath() const -> FilePath
{
  return m_d->path;
}

auto GeneratedFile::setPath(const QString &p) -> void
{
  m_d->path = FilePath::fromString(p).cleanPath();
}

auto GeneratedFile::setFilePath(const FilePath &p) -> void
{
  m_d->path = p;
}

auto GeneratedFile::contents() const -> QString
{
  return QString::fromUtf8(m_d->contents);
}

auto GeneratedFile::setContents(const QString &c) -> void
{
  m_d->contents = c.toUtf8();
}

auto GeneratedFile::binaryContents() const -> QByteArray
{
  return m_d->contents;
}

auto GeneratedFile::setBinaryContents(const QByteArray &c) -> void
{
  m_d->contents = c;
}

auto GeneratedFile::isBinary() const -> bool
{
  return m_d->binary;
}

auto GeneratedFile::setBinary(const bool b) -> void
{
  m_d->binary = b;
}

auto GeneratedFile::editorId() const -> Id
{
  return m_d->editor_id;
}

auto GeneratedFile::setEditorId(const Id id) -> void
{
  m_d->editor_id = id;
}

auto GeneratedFile::write(QString *error_message) const -> bool
{
  // Ensure the directory
  if (const auto dir = m_d->path.parentDir().toDir(); !dir.exists()) {
    if (!dir.mkpath(dir.absolutePath())) {
      *error_message = QCoreApplication::translate("BaseFileWizard", "Unable to create the directory %1.").arg(QDir::toNativeSeparators(dir.absolutePath()));
      return false;
    }
  }

  // Write out
  if (isBinary()) {
    constexpr auto flags = QIODevice::WriteOnly | QIODevice::Truncate;
    FileSaver saver(m_d->path, flags);
    saver.write(m_d->contents);
    return saver.finalize(error_message);
  }

  TextFileFormat format;
  format.codec = EditorManager::defaultTextCodec();
  format.lineTerminationMode = EditorManager::defaultLineEnding();
  return format.writeFile(m_d->path, contents(), error_message);
}

auto GeneratedFile::attributes() const -> Attributes
{
  return m_d->attributes;
}

auto GeneratedFile::setAttributes(const Attributes a) -> void
{
  m_d->attributes = a;
}

} // namespace Orca::Plugin::Core
