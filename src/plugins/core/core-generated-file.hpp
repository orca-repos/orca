// SPDX-License-Identifier: GPL-3.0-only WITH Qt-GPL-exception-1.0

#pragma once

#include "core-global.hpp"

#include <utils/id.hpp>

#include <QList>
#include <QSharedDataPointer>

namespace Utils {
class FilePath;
}

namespace Orca::Plugin::Core {

class GeneratedFilePrivate;

class CORE_EXPORT GeneratedFile {
public:
  enum Attribute {
    // Open this file in editor
    OpenEditorAttribute = 0x01,
    // Open project
    OpenProjectAttribute = 0x02,
    // File is generated by external scripts, do not write out, see BaseFileWizard::writeFiles()
    CustomGeneratorAttribute = 0x4,
    // File exists and the user indicated that he wants to keep it
    KeepExistingFileAttribute = 0x8,
    // Force overwriting of a file without asking the user to keep it
    ForceOverwrite = 0x10,
    // Mark the document temporary after opening the file
    TemporaryFile = 0x20
  };

  Q_DECLARE_FLAGS(Attributes, Attribute)

  GeneratedFile();
  explicit GeneratedFile(const Utils::FilePath &path);
  explicit GeneratedFile(const QString &path);
  GeneratedFile(const GeneratedFile &);
  auto operator=(const GeneratedFile &) -> GeneratedFile&;
  ~GeneratedFile();

  // Full path of the file should be created, or the suggested file name
  auto path() const -> QString;
  auto setPath(const QString &p) -> void;
  auto setFilePath(const Utils::FilePath &p) -> void;
  auto filePath() const -> Utils::FilePath;

  // Contents of the file (UTF8)
  auto contents() const -> QString;
  auto setContents(const QString &c) -> void;
  auto binaryContents() const -> QByteArray;
  auto setBinaryContents(const QByteArray &c) -> void;

  // Defaults to false (Text file).
  auto isBinary() const -> bool;
  auto setBinary(bool b) -> void;

  // Id of editor to open the file with
  auto editorId() const -> Utils::Id;
  auto setEditorId(Utils::Id id) -> void;
  auto write(QString *error_message) const -> bool;
  auto attributes() const -> Attributes;
  auto setAttributes(Attributes a) -> void;

private:
  QSharedDataPointer<GeneratedFilePrivate> m_d;

  friend CORE_EXPORT auto operator<<(QDebug &debug, const Orca::Plugin::Core::GeneratedFile &file) -> QDebug&;
};

CORE_EXPORT auto operator<<(QDebug &debug, const Orca::Plugin::Core::GeneratedFile &file) -> QDebug&;

using GeneratedFiles = QList<GeneratedFile>;

} // namespace Orca::Plugin::Core
